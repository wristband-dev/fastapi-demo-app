#!/bin/bash

# ANSI color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Wristband Python FastAPI Accelerator ===${NC}"
echo -e "${BLUE}=== Interactive Development Setup ===${NC}"

# Check if .env file exists in root directory
if [ -f ./.env ]; then
  echo -e "${GREEN}Found .env file in root directory${NC}"
  # Get the absolute path to the .env file
  ENV_PATH="$(pwd)/.env"
else
  # No .env file found in root, create an example
  echo -e "${YELLOW}No .env file found in root directory. Creating example file...${NC}"
  cat > ./.env.example << EOL
CLIENT_ID=your_wristband_client_id
CLIENT_SECRET=your_wristband_client_secret
LOGIN_STATE_SECRET=your_secure_random_string
LOGIN_URL=your_wristband_login_url
REDIRECT_URI=https://localhost:8080/api/auth/callback
APP_HOME_URL=http://localhost:3000
SESSION_COOKIE_SECRET=your_secure_random_string
SCOPES=['openid', 'offline_access', 'email']
EOL
  echo -e "${YELLOW}Example .env file created at ./.env.example${NC}"
  echo -e "${YELLOW}Please rename it to .env and update with your actual values${NC}"
  
  # Ask if the user wants to continue
  read -p "Do you want to continue without an .env file? (y/n): " CONTINUE
  if [[ "$CONTINUE" != "y" && "$CONTINUE" != "Y" ]]; then
    exit 1
  fi
  ENV_PATH=""
fi

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Check prerequisites
echo -e "${YELLOW}Checking prerequisites...${NC}"

# Check Python
if command_exists python3; then
  PYTHON_VERSION=$(python3 --version 2>&1 | awk '{print $2}')
  echo -e "${GREEN}✓ Python found: ${PYTHON_VERSION}${NC}"
else
  echo -e "${RED}✗ Python 3 not found. Please install Python 3.11 or higher.${NC}"
  exit 1
fi

# Check Poetry
if command_exists poetry; then
  POETRY_VERSION=$(poetry --version 2>&1 | awk '{print $3}')
  echo -e "${GREEN}✓ Poetry found: ${POETRY_VERSION}${NC}"
else
  echo -e "${RED}✗ Poetry not found. Please install Poetry.${NC}"
  echo -e "${YELLOW}You can install it with: curl -sSL https://install.python-poetry.org | python3 -${NC}"
  exit 1
fi

# Check Node.js
if command_exists node; then
  NODE_VERSION=$(node --version)
  echo -e "${GREEN}✓ Node.js found: ${NODE_VERSION}${NC}"
else
  echo -e "${RED}✗ Node.js not found. Please install Node.js 16 or higher.${NC}"
  exit 1
fi

# Check npm
if command_exists npm; then
  NPM_VERSION=$(npm --version)
  echo -e "${GREEN}✓ npm found: ${NPM_VERSION}${NC}"
else
  echo -e "${RED}✗ npm not found. Please install npm.${NC}"
  exit 1
fi

echo -e "${GREEN}All prerequisites met!${NC}"

# Ask how to start the application
echo -e "${YELLOW}How would you like to start the application?${NC}"
echo "1) Start backend and frontend in separate terminals (recommended)"
echo "2) Start backend in the background and frontend in this terminal"
echo "3) Install dependencies only (don't start services)"
read -p "Enter your choice (1-3): " CHOICE

# Set up the backend command with proper env file reference
BACKEND_CMD_BASE="cd \"$(pwd)/backend\" && echo \"Installing backend dependencies...\" && poetry install && echo \"Starting backend server...\""
if [ -n "$ENV_PATH" ]; then
  BACKEND_CMD="$BACKEND_CMD_BASE && PYTHON_DOTENV_FILE=\"$ENV_PATH\" poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload"
else
  BACKEND_CMD="$BACKEND_CMD_BASE && poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload"
fi

case $CHOICE in
  1)
    echo -e "${YELLOW}Starting backend in a new terminal window...${NC}"
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
      # macOS - using a temporary file approach instead
      echo -e "${YELLOW}Opening new terminal window for backend...${NC}"
      # Create temporary script file
      TEMP_SCRIPT=$(mktemp /tmp/backend-start.XXXXXX.sh)
      echo "#!/bin/bash" > "$TEMP_SCRIPT"
      echo "cd \"$(pwd)/backend\"" >> "$TEMP_SCRIPT"
      echo "echo \"Installing backend dependencies...\"" >> "$TEMP_SCRIPT"
      echo "poetry install" >> "$TEMP_SCRIPT"
      echo "echo \"Starting backend server...\"" >> "$TEMP_SCRIPT"
      if [ -n "$ENV_PATH" ]; then
        echo "PYTHON_DOTENV_FILE=\"$ENV_PATH\" poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload" >> "$TEMP_SCRIPT"
      else
        echo "poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload" >> "$TEMP_SCRIPT"
      fi
      chmod +x "$TEMP_SCRIPT"
      
      # Run the script in a new terminal
      osascript -e "tell application \"Terminal\" to do script \"$TEMP_SCRIPT\""
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
      # Linux
      if command_exists gnome-terminal; then
        gnome-terminal -- bash -c "$BACKEND_CMD; exec bash"
      elif command_exists xterm; then
        xterm -e "$BACKEND_CMD" &
      else
        echo -e "${RED}Cannot open a new terminal window automatically.${NC}"
        echo -e "${YELLOW}Please start the backend manually in a new terminal:${NC}"
        echo "cd $(pwd)/backend"
        echo "poetry install"
        if [ -n "$ENV_PATH" ]; then
          echo "PYTHON_DOTENV_FILE=\"$ENV_PATH\" poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload"
        else
          echo "poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload"
        fi
      fi
    else
      # Windows or other
      echo -e "${RED}Cannot open a new terminal window automatically.${NC}"
      echo -e "${YELLOW}Please start the backend manually in a new terminal:${NC}"
      echo "cd $(pwd)/backend"
      echo "poetry install"
      if [ -n "$ENV_PATH" ]; then
        echo "PYTHON_DOTENV_FILE=\"$ENV_PATH\" poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload"
      else
        echo "poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload"
      fi
    fi
    
    echo -e "${YELLOW}Starting frontend...${NC}"
    cd frontend
    echo -e "${YELLOW}Installing frontend dependencies...${NC}"
    npm install
    
    echo -e "${BLUE}=== IMPORTANT ====${NC}"
    echo -e "${YELLOW}The backend should be running at:${NC} http://localhost:8080"
    echo -e "${YELLOW}Verify backend API is available at:${NC} http://localhost:8080/docs"
    echo -e "${YELLOW}Now starting the frontend at:${NC} http://localhost:3000"
    echo ""
    
    npm run dev
    ;;
    
  2)
    echo -e "${YELLOW}Starting backend in the background...${NC}"
    cd backend
    echo -e "${YELLOW}Installing backend dependencies...${NC}"
    poetry install
    echo -e "${YELLOW}Starting backend server...${NC}"
    
    if [ -n "$ENV_PATH" ]; then
      PYTHON_DOTENV_FILE="$ENV_PATH" poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload &
    else
      poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload &
    fi
    
    BACKEND_PID=$!
    echo -e "${GREEN}Backend started with PID: ${BACKEND_PID}${NC}"
    
    echo -e "${YELLOW}Starting frontend...${NC}"
    cd ../frontend
    echo -e "${YELLOW}Installing frontend dependencies...${NC}"
    npm install
    
    echo -e "${BLUE}=== IMPORTANT ====${NC}"
    echo -e "${YELLOW}The backend is running at:${NC} http://localhost:8080"
    echo -e "${YELLOW}Verify backend API is available at:${NC} http://localhost:8080/docs"
    echo -e "${YELLOW}Now starting the frontend at:${NC} http://localhost:3000"
    echo ""
    
    npm run dev
    
    # Cleanup when script is terminated
    trap "kill $BACKEND_PID; echo -e '${YELLOW}Shutting down backend server...${NC}'" EXIT
    ;;
    
  3)
    echo -e "${YELLOW}Installing backend dependencies...${NC}"
    cd backend
    poetry install
    echo -e "${GREEN}Backend dependencies installed.${NC}"
    
    echo -e "${YELLOW}Installing frontend dependencies...${NC}"
    cd ../frontend
    npm install
    echo -e "${GREEN}Frontend dependencies installed.${NC}"
    
    echo -e "${GREEN}All dependencies installed. You can now start the services manually:${NC}"
    echo -e "${YELLOW}Backend:${NC}"
    echo "cd $(pwd)/../backend"
    if [ -n "$ENV_PATH" ]; then
      echo "PYTHON_DOTENV_FILE=\"$ENV_PATH\" poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload"
    else
      echo "poetry run uvicorn app:app --host 0.0.0.0 --port 8080 --reload"
    fi
    echo -e "${YELLOW}Frontend:${NC}"
    echo "cd $(pwd)"
    echo "npm run dev"
    ;;
    
  *)
    echo -e "${RED}Invalid choice.${NC}"
    exit 1
    ;;
esac

echo -e "${GREEN}Setup initiated!${NC}"
echo -e "${BLUE}=== Testing Instructions ====${NC}"
echo -e "${YELLOW}1. Backend URL:${NC} http://localhost:8080"
echo -e "${YELLOW}   - API Documentation:${NC} http://localhost:8080/docs"
echo -e "${YELLOW}2. Frontend URL:${NC} http://localhost:3000 ${GREEN}<-- Open this in your browser${NC}"
echo -e "${YELLOW}3. Test authentication by clicking login on the frontend${NC}"
echo -e "${YELLOW}   - This will redirect to Wristband${NC}"
echo -e "${YELLOW}   - After authentication, you should be redirected back to the app${NC}"
echo ""
echo -e "${BLUE}=== Environment Variables ====${NC}"
echo -e "${YELLOW}Your .env file is referenced from:${NC} ${GREEN}$([ -n \"$ENV_PATH\" ] && echo \"$ENV_PATH\" || echo \"No .env file found\")${NC}"
echo -e "${YELLOW}APP_HOME_URL=${GREEN}http://localhost:3000${NC} (Should match the frontend URL)"
echo -e "${YELLOW}REDIRECT_URI=${GREEN}https://localhost:8080/api/auth/callback${NC} (Should match the backend callback URL)" 